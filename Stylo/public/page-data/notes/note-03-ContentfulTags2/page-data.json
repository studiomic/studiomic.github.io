{"componentChunkName":"component---src-templates-note-post-js","path":"/notes/note-03-ContentfulTags2/","result":{"data":{"markdownRemark":{"id":"a1362cb8-9073-539e-bd88-1a941ed73cb5","html":"<p><a href=\"/notes/note-02/\">BlogにContentfulのTags機能を追加した</a>\n(2023/06/04 : Gatsby+Contentful Tags)の続きです。</p>\n<details open>\n  <summary>もくじ</summary>\n<ul>\n<li><a href=\"#createPage\">createPage</a></li>\n<li><a href=\"#kebabCase\">余談：ケバブケースじゃなくていい</a></li>\n<li><a href=\"#context\">context:の受け渡し</a></li>\n<li><a href=\"#TagIndexQuery\">TagIndexQueryのソース</a></li>\n<li><a href=\"#Tagslink\">PostページにTags &#x3C;Link to={ $slug }>をリンクを表示する</a></li>\n<li><a href=\"#BuildError\">?.オプショナルチェイング演算子をつけずにBuild Error</a></li>\n</ul>\n</details>\n<hr>\n<p>とりあえず、インターネット検索で見かけたTagsページの作り方を、Codeのコピペでは埒が開かないと気づいたときに、ひとまずシラフになって設計図とはいえないポンチ図を書き出しました。</p>\n<p>制作の鍵は<strong>Pen</strong>です。紙とペン。</p>\n<p> </p>\n<ul>\n<li>まずは気ままにPostたちにつけられたTagを、クリックした先に表示する <strong>/tags/$display_tag/</strong> というページ群が、Tagの数だけ必要。<br>定数のない動的につくるページだが、外観は「リストである」ため<a href=\"/blog\">Bolgトップ</a>と同レイアウトで。<br></li>\n</ul>\n<p>🩷<a href=\"/tags/macMini/\">成果物：Mac mini というタグ名を押下した例：/tags/macMini/</a><br> <br></p>\n<ul>\n<li>リストから開く、各Postページはすでにあるので不要だが、PostページのTag群は、それぞれ該当の <strong>/tags/$display_tag/</strong> へリンクさせる。displayに見せる表示<br>このStarterの場合は、Tags表示はされていたのを<strong>Contentful Tags</strong>に差し替えてリンクもつけるという工程。<br></li>\n</ul>\n<p>🩷<a href=\"/blog/gatsby-cloud/\">成果物：4つのタグがPostの末尾に表示されている例：/blog/gatsby-cloud/</a><br> <br></p>\n<ul>\n<li>\n<p>タグ一覧表。WordPressウィジェットで「タグ・クラウド」と呼ばれているもの。<br>（うちのBlogに要るかぁ？）とあまり必要を感じなかったが「一望できる・網羅された」はユーザー体験としては大切と考えるタチなので、 <strong>/tags/$display_tag/</strong> 各ページのフッター近くに<strong>TAG Cloud</strong>として載せた。<br>TAG Cloudを書くために作業用でつくった1枚もの<a href=\"/tags/\">⭐️ALL TAGS</a>もTAG Cloudの右隅にひっそり鎮座。<br>大量に多方面記事を載せるBlogなら重宝するもの。</p>\n</li>\n<li>\n<p>因みに<a href=\"/blog/\">Blogトップ</a>では以前と同じくTagを表示するのみでLinkをしないため、Linkのあるなしでブロックの高さに変化をつけている。</p>\n</li>\n</ul>\n<hr>\n<h1>createPage<a name=\"createPage\"></a></h1>\n\n        <div class=\"gatsby-code-title\">\n          <span>gatsby-node.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token property\">tags</span>.<span class=\"token property-query\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token property\">tag</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>> <span class=\"token punctuation\">{</span>\n    <span class=\"token property-query\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token attr-name\">path</span><span class=\"token punctuation\">:</span> `/<span class=\"token property\">tags</span>/$<span class=\"token punctuation\">{</span><span class=\"token property\">tag</span>.<span class=\"token property\">contentful_id</span><span class=\"token punctuation\">}</span>/`<span class=\"token punctuation\">,</span>\n      <span class=\"token attr-name\">component</span><span class=\"token punctuation\">:</span> <span class=\"token property\">tagIndex</span><span class=\"token punctuation\">,</span>\n      <span class=\"token attr-name\">context</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token attr-name\">slug</span><span class=\"token punctuation\">:</span> <span class=\"token property\">tag</span>.<span class=\"token property\">contentful_id</span><span class=\"token punctuation\">,</span>\n        <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token property\">tag</span>.<span class=\"token property\">name</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Tagページの動的な生成は、すでにあるBlogPost用の<strong>createPage</strong>と同じ要領でサクッと書ける。<br>\nPostの場合は、<strong>if (posts.length > 0) { }</strong>   （0でなければ）条件下にあるが、IFは書かなかった乱暴者。<br></p>\n<p>forEachで置き換え元となる<strong>tags.</strong> は result.のContentful Tag（33行目）</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>gatsby-node.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token object\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">createPage</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token property\">actions</span>\n\n<span class=\"token property\">const</span> <span class=\"token property\">blogPost</span> <span class=\"token operator\">=</span> <span class=\"token property\">path</span>.<span class=\"token property-query\">resolve</span><span class=\"token punctuation\">(</span>'./<span class=\"token property\">src</span>/<span class=\"token property\">templates</span>/<span class=\"token property\">blog</span>-<span class=\"token property\">post</span>.<span class=\"token property\">js</span>'<span class=\"token punctuation\">)</span>\n<span class=\"token property\">const</span> <span class=\"token property\">tagIndex</span> <span class=\"token operator\">=</span> <span class=\"token property\">path</span>.<span class=\"token property-query\">resolve</span><span class=\"token punctuation\">(</span>'./<span class=\"token property\">src</span>/<span class=\"token property\">templates</span>/<span class=\"token property\">tags</span>-<span class=\"token property\">index</span>.<span class=\"token property\">js</span>'<span class=\"token punctuation\">)</span>\n\n<span class=\"token property\">const</span> <span class=\"token property\">result</span> <span class=\"token operator\">=</span> <span class=\"token property\">await</span> <span class=\"token property-query\">graphql</span><span class=\"token punctuation\">(</span>\n    `\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token object\">allContentfulBlogPost</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token object\">nodes</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">title</span>\n            <span class=\"token property\">slug</span>\n            <span class=\"token object\">metadata</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token object\">tags</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">contentful_id</span>\n                <span class=\"token property\">name</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token object\">allContentfulTag</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token object\">nodes</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">contentful_id</span>\n            <span class=\"token property\">name</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    `\n  <span class=\"token punctuation\">)</span>\n// <span class=\"token operator\">...</span>略<span class=\"token operator\">...</span>\n// ▼ ▼ ▼ <span class=\"token property\">result</span>で得られた　<span class=\"token property\">allContentfulTag</span>.<span class=\"token property\">nodes</span>　を代入\n\n<span class=\"token property\">const</span> <span class=\"token property\">tags</span> <span class=\"token operator\">=</span> <span class=\"token property\">result</span>.<span class=\"token property\">data</span>.<span class=\"token property\">allContentfulTag</span>.<span class=\"token property\">nodes</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>component: tagIndex,</strong> はテンプレートファイルを指すパスを直接書くケースを多く見たが、このStarterの場合は、3行目のように先に代入しておく手法だったのでTgasも4行目\n<strong>path.resolve()</strong>\nで同様にテンプレートを渡している。</p>\n<hr>\n<h2>余談：ケバブケースじゃなくていい<a name=\"kebabCase\"></a></h2>\n<p>Gatsbyのタグ、ContentfulTaulのTags、といったキーワードから来た人なら、ニッチでないメジャーなMarkdownの<strong>frontmatter</strong>での手法はとっくに目にしていると思う。</p>\n<p>例でいうと製品名：Mac mini をタグ付けしたとき<br>\nDisplay表示はスペースありでも、slugとしてはよろしくないためハイフンを挟んだ <strong>kebab-case</strong> に置き換える手法。\nfrontmatterのTagsは、Tags[0],Tags[1],Tags[2],・・・と一次元配列なので、取り出し方は単純だが、実態とslugを置き換える必要が生じる場合あり。</p>\n<p>漢字が入ると急にむずかしく感じるが、要は「空白スペース」を見つけたら「ハイフン」に置き換えてslugとする。<br>\n他方、Contentful Tags は最初から名前とIDを持ってつくられているため<br>\n <br>\n実態：自分がつけたタグそのもので、Displayに表示する名　=　tag.name　と<br>\nslug：にすべきID　=　tag.contentful_id　をそのまま使い分けられる。</p>\n<p>createPage の <strong>context:</strong> として渡しているのはCodeに載せたとおり。</p>\n<p><strong>context:</strong> として渡されるんだから、Postページでの扱いはお茶の子さいさいだろう！と思いきや、これがなかなか慣れない初心者には難関になった。</p>\n<hr>\n<h1>context:の受け渡し<a name=\"context\"></a></h1>\n<p>書籍もチェートリアルも読まずに他人のソースだけ見て、どうにかしようという魂胆がまず遠回りの要因なんすが！<br>\nパターンとして多かったのが、こういうdataをマルッと渡すもの</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'props.data.allContentfulBlogPost.nodes'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>渡す側は</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>gatsby-node.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token attr-name\">context</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token attr-name\">slug</span><span class=\"token punctuation\">:</span> <span class=\"token property\">post</span>.<span class=\"token property\">slug</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">previousPostSlug</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">nextPostSlug</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token attr-name\">article</span><span class=\"token punctuation\">:</span> <span class=\"token property\">post</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>slugと\n<strong>article: post</strong> （マルッとdata）\nと next / previous など前後ページの繋がりをつくったものを渡すケースが当然ながら情報として多く</p>\n<p>contextで渡されたものは <strong>$context_name</strong> : <strong>$slug</strong> などで\nQueryのフィルターに使える。という理解までは\nlocalhost:8000/___graphql でじっくりGraphQLを見ると気づくのだが</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> tagname <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'props.pageContext'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>ズバリのたったこれだけが、導き出されるまでに時間を喰った。<br> <br></p>\n<p><strong>結局・・・本家がわかりやすかった。</strong><br>\n<a href=\"https://www.gatsbyjs.com/docs/creating-and-modifying-pages/\">https://www.gatsbyjs.com/docs/creating-and-modifying-pages/</a><br> <br></p>\n<p>ドキュメントを翻訳も交えて真剣に眺めた結果、直接的なコピペネタはなくても、<strong>props</strong> なんだよな、\n<strong>pageContext</strong> はキャメルケースだな、とか「目に伝えてくる」<br>\n今読み返すと下から2番目のcodeSnippetで気づいたのか。<br> <br></p>\n<p class=\"crimson-col bold\">On your pages and templates, you can access your context via the prop pageContext like this:<br>（ページとテンプレートでは、次のように prop pageContext を介してコンテキストにアクセスできます）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Page</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> pageContext <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>pageContext<span class=\"token punctuation\">.</span>house<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Page</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>手法が少し違うだけな代入ケースが見えたら自分のStarterに合わせた3行目を加筆し</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'props.data.allContentfulBlogPost.nodes'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> tags <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'props.data.allContentfulTag.nodes'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> tagname <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'props.pageContext'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">)</span>\t</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>createPageでつくられる <strong>/tags/$display_tag/</strong> のテンプレートで</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>/src/templates/tags-index.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>h1 className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token constant\">TAGS</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>tagname<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>ようやく対象のTag名をページのタイトルとして埋められました。</p>\n<p>たったこれだけだが、Tagリンクを表示するよりずっと難関だった件。<br> <br></p>\n<hr>\n<h1>TagIndexQueryのソース<a name=\"TagIndexQuery\"></a></h1>\n\n        <div class=\"gatsby-code-title\">\n          <span>/src/templates/tags-index.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token property\">export</span> <span class=\"token property\">const</span> <span class=\"token property\">pageQuery</span> <span class=\"token operator\">=</span> <span class=\"token property\">graphql</span>`\n<span class=\"token keyword\">query</span> <span class=\"token definition-query function\">TagIndexQuery</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$slug</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token object\">allContentfulTag</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token object\">nodes</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">contentful_id</span>\n\t\t\t<span class=\"token property\">name</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token property-query\">allContentfulBlogPost</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token attr-name\">sort</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">publishDate</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">DESC</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token attr-name\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">metadata</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">elemMatch</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">contentful_id</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$slug</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token object\">nodes</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">title</span>\n\t\t\t<span class=\"token property\">slug</span>\n\t\t\t<span class=\"token property-query\">publishDate</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">formatString</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"YYYY/MM/DD\"</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token object\">metadata</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token object\">tags</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token property\">contentful_id</span>\n\t\t\t\t\t<span class=\"token property\">name</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token object\">heroImage</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token property-query\">gatsbyImage</span><span class=\"token punctuation\">(</span>\n\t\t\t\t\t<span class=\"token attr-name\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">FULL_WIDTH</span>\n\t\t\t\t\t<span class=\"token attr-name\">placeholder</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">BLURRED</span>\n\t\t\t\t\t<span class=\"token attr-name\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">424</span>\n\t\t\t\t\t<span class=\"token attr-name\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">212</span>\n\t\t\t\t<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token object\">description</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">raw</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n`</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>まずTagsリンクから対象となるPostを絞り込むフィルターに、gatsby-node.jsのcreatePageから\n<strong>context:</strong>\nとして渡された <strong>slug: tag.contentful_id,</strong>\nを11行目で使っています。{eq: $slug }</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token literal-property property\">filter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">metadata</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">elemMatch</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">contentful_id</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">eq</span><span class=\"token operator\">:</span> $slug <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>そのPostが持つTagsの中に <strong>$slug</strong> と同じ文字列の <strong>contentful_id</strong> があるかどうか。\n<strong>elemMatch:</strong> で確認。</p>\n<p>事前に $slug を文字列化する処理が2行目 <strong>($slug: String!)</strong><br>\nallContentfulTag { }<br>\nallContentfulBlogPost( ) { }<br></p>\n<p>TagとPost 両方のdataを\nGraphQLに要求するpageQuery<br> <br></p>\n<hr>\n<h1>PostページにTags &#x3C;Link to={ $slug }>をリンクを表示する<a name=\"Tagslink\"></a></h1>\n\n        <div class=\"gatsby-code-title\">\n          <span>/src/templates/blog-post.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>small</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{tagstyles.tags}</span><span class=\"token punctuation\">></span></span>\n{post.metadata.tags.map(tag => (\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{tag}</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{tagstyles.tag}</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Link</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{`/tags/${tag.contentful_id}`}</span><span class=\"token punctuation\">></span></span>{tag.name}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Link</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t))}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>small</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>styleやHTMLタグもそのまま転記してますが、2行目から6行目のマッピングで置き換え。<br></p>\n<p>日本語で（写像とは）とググると、めちゃくちゃ的確な説明が出てきました。</p>\n<blockquote>\n集合の各元(げん)を他の集合（または同じ集合）の元にそれぞれ対応させること。<br>\n「実数の対から虚数への―」<br>\nmap(ping) の訳。同一集合内で行うのは特に「変換」と言う。\n</blockquote>\n<p>上のソースは、Postページや <strong>/tags/${tag.contentful_id}</strong> 自身にも「TAG Cloud」として載せています。<br>\n<a href=\"/blog\">Bolgトップ</a>だけは、Tag表示のみリンクなしの使い方をしていますが、Gatsby developの開発環境では問題なかったものが、Buildエラーになりました。\n <br><a name=\"BuildError\"></a></p>\n<p>path/ に問題がある<br>\npost.metadata.tags. は未定義だ<br></p>\n<p>といったエラー内容で思い当たることが一つ。<br>\nContentful製のこのStarterは、Webで見る見本ソースより小洒落ているというか、スマートというか・・・だらだらと1ページに書かずに適度にcomponents化してあるのも、お手本になるなぁと気に入っていますが、components化すると階層は深くなるんですね。</p>\n<p>その一例が問題になった<a href=\"/blog\">Bolgトップ</a>で<br>\nsrc/pages/blog.js 本体にはごく短くHero-Imageと「BLOG」というページタイトルまで。<br>\nPostを並べているGridは</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>/src/pages/blog.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ArticlePreview</span> <span class=\"token attr-name\">posts</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{posts}</span> <span class=\"token punctuation\">/></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>とcomponentsに渡して任せている。<br>\n見当はつくが対処法はまったく思いつかん。というときに救いの記事💜</p>\n<p>⭐️ <a href=\"https://qiita.com/yosh1ba/items/6c2299813dcc76d910d7\">gatsby build 時の「WebpackError: TypeError: Cannot read property 'hoge' of undefined」対処法</a></p>\n<blockquote>\n<p>対処法：エラーとなっているプロパティ（この場合はhoge）の前に?.を付け、?.hogeとすることで解消</p>\n</blockquote>\n\n        <div class=\"gatsby-code-title\">\n          <span>/src/components/ArticlePreview.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ArticlePreview</span> <span class=\"token attr-name\">posts</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{posts}</span> <span class=\"token punctuation\">/></span></span>\n// で{posts}を渡された先のcomponentsで、metadata?. とオプショナルチェイング演算子を挿入\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>small</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{tagstyles.tags}</span><span class=\"token punctuation\">></span></span>\n\t{post.metadata?.tags.map(tag => {\n\treturn (\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{tag.contentful_id}</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>{tagstyles.tag}</span><span class=\"token punctuation\">></span></span>\n\t\t{tag.name}\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\t)\n\t})}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>small</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>説明が的確だったのでそのまま引用します。</p>\n<blockquote>\n<h3>?.とは何なのか</h3>\n調べてみると、オプショナルチェイング演算子と呼ばれるものみたいです。\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">MDNによると</a>、深い入れ子構造になったサブプロパティにアクセスする際は、各プロパティ間の参照を確認する必要があるとのこと。今回のコードで言うと、data.allFile.nodes内にfindでヒットした要素が存在することを確認した上で、publicURLを取得する必要があるようです。</p>\n<p>これを暗黙的にやってくれるのが、オプショナルチェイング演算子です。</p>\n</blockquote>\n<!-- EOF -->","timeToRead":7,"frontmatter":{"title":"BlogにTags機能をつける工程","date":"2023/06/04","description":"続・Gatsby+Contentful Tags｜シラフになって考えたら楽しかった","slug":"note-03-ContentfulTags2","featuredImage":null}}},"pageContext":{"slug":"note-03-ContentfulTags2","previous":"note-04-Markdown","next":"note-02-ContentfulTags","previousTitle":"Markdownはじめました","nextTitle":"BlogにContentfulのTags機能を追加した","id":"a1362cb8-9073-539e-bd88-1a941ed73cb5"}},"staticQueryHashes":["2507079572"],"slicesMap":{}}